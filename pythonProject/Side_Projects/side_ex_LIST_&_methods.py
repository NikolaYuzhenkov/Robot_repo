################################### LIST METHODS: #######################################
# append()	Adds an element at the end of the list
#
# clear()	Removes all the elements from the list
#
# copy()	Returns a copy of the list
#
# count()	Returns the number of elements with the specified value
#
# extend()	Add the elements of a list (or any iterable), to the end of the current list
#
# index()	Returns the index of the first element with the specified value
#
# insert()	Adds an element at the specified position
#
# pop()	Removes the element at the specified position
#
# remove()	Removes the first item with the specified value
#
# reverse()	Reverses the order of the list
#
# sort()	Sorts the list


############################# EX 1 #############################

# Сохраните в переменной  my_list список, в котором должно быть 77 элемента и все они представляют собой единицу
# [1, 1, ... , 1]
# После этого выведите переменную my_list на экран
#
# my_list = 77 * [1]
# print(my_list)


########################## EX 2 #################################

# Сохраните в переменной  my_list список из 15-ти повторений букв q, w, t
# В качестве ответа выведите на экран переменную my_list
#
# my_list = ['q', 'w', 't'] * 15
# print(my_list)

########################## EX 3 ###########################

# Допишите программу ниже, чтобы она вывела через пробел в одной строке значения самого маленького и самого большого элементов списка my_list.
#
# my_list = [-214, 181, -139, 448, -664, -66, 213, 832, 717, -462, -924, -706, -85, -244, -222, -340, -482, -518, -781, 759, -593, 905, -354, -377, -141, -742, 383, -381, 109, -639, -480, -810, -686, 892, -612, 696, 993, 791, 631, -493, -218, -829, -275, 619, -628, -241, -565, -835, -69, 747, 711, -252, -811, -407, -153, 904, 933, -254, 307, -493, -419, -109, -543, 155, -127, 613, -452, -459, 856, 562, 333, -66, -77, -598, -779, -278, 867, 321, -20, -415, -357, 735, -906, -14, -370, 453, -630, -736, -830, -917, 32, 422, -895, 198, 284, 472, -986, -964, -989, 29]
# print(min(my_list), max(my_list))


############################# EX 4 #############################

# Программа получает на вход список из целых чисел. Ваша задача вывести True в случае, если в данном списке встречается значение 777. В противном случае вывести False
#
# Примечание:
# Чтобы прочитать из ввода целые числа и сохранить их в виде списка в переменной my_list вам необходимо написать строчку
#
# my_list = list(map(int, input().split()))
#
# a = list(map(int, input().split()))
#
# if 777 in a:
#     print(True)
# else:
#     print(False)

############################# EX 5 ###########################

# Программа получает на вход список из целых чисел. Ваша задача найти сумму списка
#
# Примечание:
#
# Чтобы прочитать из ввода целые числа и сохранить их в виде списка в переменной list_numbers вам необходимо написать строчку
#
# list_numbers = list(map(int, input().split()))
# Sample Input:
#
# 8 11 17
# Sample Output:
#
# 36

# ИСПОЛЬЗУЯ СРЕЗЫ

# list_numbers = list(map(int, input().split()))
# result = list_numbers[0] + list_numbers[1] + list_numbers[2]
#
# print(list_numbers)
# print(result)


# ИСПОЛЬЗУЯ ЦИКЛ

# list_numbers = list(map(int, input().split()))
# length = len(list_numbers)
# c = 0
# for i in list_numbers:
#     c += i
#
#
# print(c)

# ИСПОЛЬЗУАЯ ФУНКЦИЮ SUM

# print(sum(list(map(int, input().split()))))


##################### EX 7 ##########################

# Иван Васильевич пришел на рынок и решил купить два арбуза: один для себя, а другой для тещи. Понятно, что для себя нужно выбрать арбуз потяжелей, а для тещи полегче. Но вот незадача: арбузов слишком много и он не знает как же выбрать самый легкий и самый тяжелый арбуз? Помогите ему!
#
# Входные данные
# Программа получает список целых чисел записанных через пробел. Каждое число – это масса соответствующего арбуза. Все числа натуральные и не превышают 30000.
#
# Выходные данные
# Вам нужно вывести два числа через пробел: массу арбуза, который Иван Васильевич купит теще и массу арбуза, который он купит себе.
#
# mas = list(map(int, input().split()))
# print(min(mas), max(mas))

####################### EX8 #######################

# Программа получает на вход список из целых чисел. Ваша задача найти среднее арифметическое введенного списка чисел
#
# Примечание:
#
# Чтобы прочитать из ввода целые числа и сохранить их в виде списка в переменной list_numbers вам необходимо написать строчку
#
# list_numbers = list(map(int, input().split()))

# list_numbers = list(map(int, input().split()))
# leng = len(list_numbers)
# sum = 0
# for i in list_numbers:
#     sum += i
# print(sum / leng)

# ВАРИАНТ ЧЕРЕЗ ФУНКЦИИ

# lst = list(map(int, input().split()))
# print(sum(lst)/len(lst))


########################### EX 9 ##############################

# Программа получает на вход список целых чисел и ваша задача вывести второй элемент этого списка.
#
# Гарантируется, что список будет состоять не менее чем из трех элементов
#
# Примечание:
#
# Чтобы прочитать из ввода целые числа и сохранить их в виде списка в переменной a вам необходимо написать строчку
#
# a = list(map(int, input().split()))

# a = list(map(int, input().split()))
# print(a[1])

########################### EX 10 ##############################

# Программа получает на вход список целых чисел и ваша задача вывести срез списка с третьего элемента по пятый включительно.
#
# Гарантируется, что список будет состоять не менее чем из пяти элементов.
#
# Примечание:
#
# Чтобы прочитать из ввода целые числа и сохранить их в виде списка в переменной a вам необходимо написать строчку
#
# a = list(map(int, input().split()))

# a = list(map(int, input().split()))
# print(a[2:5])

########################### EX 11 ##############################

# Программа получает на вход список целых чисел и ваша задача вывести последние три элемента этого списка через срез
#
# Гарантируется, что список будет состоять не менее чем из пяти элементов.

# a = list(map(int, input().split()))
# print(a[-3:])

########################### EX 12 ##############################

# Программа получает на вход список целых чисел и ваша задача вывести каждый третий элемент этого списка, начиная со второго по счету значения.
# Гарантируется, что список будет состоять не менее чем из семи элементов.
# Примечание:
# Чтобы прочитать из ввода целые числа и сохранить их в виде списка в переменной a вам необходимо написать строчку
#
# a = list(map(int, input().split()))

# a = list(map(int, input().split()))
# print(a[1::3])

########################### EX 13 #############################

# Программа получает на вход список целых чисел и ваша задача вывести этот список  в обратном порядке при помощи срезов
#
# Гарантируется, что список будет состоять не менее чем из  трех элементов.
#
# a = list(map(int, input().split()))
# print(a[::-1])

########################### EX 14 #############################

# Перед вами список топовых сериалов по версии кинопоиска. Ваша задача заменить в нем сериал "Бригада" на "Сверхъестественное" и "Друзья" на "Настоящий детектив"
#
# В качестве ответа распечатайте на экран обновленный список.
#
# top = ['Игра престолов', 'Шерлок', 'Друзья', 'Во все тяжкие', 'Доктор Хаус', 'Теория большого взрыва', 'Бригада']
#
# top = ['Игра престолов', 'Шерлок', 'Друзья', 'Во все тяжкие', 'Доктор Хаус', 'Теория большого взрыва', 'Бригада']
# top[-1] = "Сверхъестественное"
# top[2] = "Настоящий детектив"
# print(top)

########################## EX 15 ##################################

# Перед вами находится список months, хранящий сокращенное название месяцев в году
#
# Ваша программа получает на вход порядковый номер месяца в году - целое число от 1 до 12.
#
# Ваша задача распечатать краткое название месяца, которое соответствует порядковому номеру месяца

# months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
#
# print(months[int(input()) - 1])

############################## EX 16 ##############################

#################################### METHODS OF LISTS #########################################

##################################### METHOD .APPEND ####################################

# Первый метод с которым мы познакомимся называется .append. Он имеет следующий шаблон вызова:
#
# L.append(x)
# Метод .append обязательно принимает одно значение x и добавляет его в качестве нового элемента
# в конец списка L. Следовательно размер списка увеличивается на одно значение.
# Никакого присвоения в переменную, как в случае со строками, здесь не требуется.

# a = [34, 23, 12, 28, 9, 15]
# print(a)  # [34, 23, 12, 28, 9, 15]
# a.append(1)

##################################### METHOD CLEAR:  ####################################

# Следующий метод это .clear. У него следующий формат вызова:
#
# L.clear()
# Метод .clear не принимает никаких аргументов и делает список L пустым, удаляет все его элементы.

# a = [34, 23, 12, 28, 9, 15]
# print(a)  # [34, 23, 12, 28, 9, 15]
# a.clear()
# print(a)  # []

##################################### METHOD COPY ####################################

# Метод .copy не принимает аргументов, делает копию списка - создается совершенно новый объект в памяти,
# он тоже является списком и будет состоять из таких же элементов как и оригинальный список,
# но у нового списка будет другой идентификатор.
#
# a = [34, 23, 12, 28, 9, 15]
# b = a.copy()
# print(a)  # [34, 23, 12, 28, 9, 15]
# print(b)  # [34, 23, 12, 28, 9, 15]
#
# print('-' * 10)
#
# a[0] = 3
# print(a)  # [3, 23, 12, 28, 9, 15]
# print(b)  # [34, 23, 12, 28, 9, 15]

###################################### METHOD COUNT ####################################

# Метод .count имеет следующий формат:
#
# L.count(x)
# Принимает обязательно один аргумент. При помощи метода .count можно посчитать сколько раз встретилось
# в списке переданное значение.

# a = [34, 23, 12, 28, 9, 15, 23, 2, 23]
# print(f'23 встречается {a.count(23)} раз')
# print(f'12 встречается {a.count(12)} раз')
# print(f'24 встречается {a.count(24)} раз')

#####################################  METHOD EXTEND ####################################
# Метод .extend имеет следующий формат:
#
# L.extend(iterable)
# Метод .extend принимает обязательно один аргумент - итерабельную последовательность.
# Здесь нам придется забежать немного вперед, потому что данную тему мы еще не разбирали.
# Итерабельная последовательность состоит из нескольких элементов, поэтому списки и строки являются такой последовательностью.
# При помощи метода .extend можно добавить сразу все элементы из итерируемой последовательности в конец списка L.
# Значит метод .extend позволяет добавлять много элементов за один раз, вот его отличие от метода .append

# a = [34, 23, 12, 28, 9, 15]
# print(a)
# a.extend([23, 12])
# print(a)
# a.extend('hello')
# print(a)
# В метод .extend можно передать список или строку, но нельзя передать число. Получите ошибку

#################################### METHOD INDEX #################################

# Метод .index имеет следующий формат:
#
# L.index(x, [start [, end]])
# Метод .index находит переданный элемент x в списке L и возвращает его индекс.
# Если в списке находится несколько элементов,  равных значению x,
# то будет возвращен индекс первого из них. Если список не содержит переданный элемент x,
# будет вызвано исключение ValueError.  У метода есть необязательные параметры start и end :

# a = [34, 23, 12, 28, 23, 2, 23]
# print(a.index(23))
# print(a.index(12))
# print(a.index(23, 1))
# print(a.index(23, 2))
# print(a.index(23, 2, 5))


################################# METHOD INSERT  ################################

# Метод .insert имеет следующий формат:
#
# L.insert(index, value)
# Метод .insert выполняет вставку нового значения в список на определенную позицию.
# Метод .insert должен принимать два значения: index  - индекс куда вставляем новое значение и value -
# что нужно ставить, то есть само значение.

# a = [34, 23, 12, 28, 23]
# a.insert(1, 99)
# print(a)

################################# METHOD POP  ################################

# Очень полезный метод .pop. У него следующий формат вызова:
#
# L.pop([index])
# Метод .pop возвращает значение элемента с индексом index, а также удаляет его из списка L.
# По сути метод выполняет изъятие из списка элемента, стоящего на позиции index
#
# Необязательный аргумент - индекс index по умолчанию равен -1. Так что по умолчанию эта операция производит
# действие с последним элементом последовательности. Вы можете передать значение индекса для изъятия элемента
#
# Результат метода .pop можно сохранить в переменную или сразу распечатать на экран.

# a = [34, 23, 12, 28, 23]
#
# a.pop()
# print(a)  # [34, 23, 12, 28]
#
# b = a.pop()
# print(b)  # 28
# print(a)  # [34, 23, 12]
#
# print(a.pop())  # 12
# print(a)  # [34, 23]
#
# print(a.pop(0))  # 34
# print(a)  # [23]

################################# METHOD REMOVE  ################################

# Метод .remove имеет следующий формат:
#
# L.remove(x)
#  Слово remove переводится как «удалить», но этот метод, в отличие от метода .pop, удаляет по значению.
# Вы должны обязательно передать одно значение x.
#
#  Метод .remove производит удаление первого элемента, значение которого равно x из списка L.
# Длина списка уменьшается на единицу, элементы, стоящие справа от удаленного, смещаются влево на одну позицию.
#
# Если в списке L есть несколько элементов равных значению x, удалиться только первый найденный слева элемент.
# За один вызов метода удаляется один элемент, если нужно удалить несколько элементов, нужно несколько раз вызвать метод  .remove
#
# a = [34, 23, 12, 28, 23, 34]
# a.remove(34)
# print(a)  # [23, 12, 28, 23, 34]
# a.remove(34)
# print(a)  # [23, 12, 28, 23]


################################# METHOD REVERSE  ################################

# Метод .reverse имеет следующий формат:
#
# L.reverse()
# Метод .reverse  не требует никаких аргументов и выполняет разворот списка -
# располагает элементы в противоположном порядке. При повторном вызове список вернётся в изначальное положение.
#
# a = [34, 23, 12, 28, 23]
# a.reverse()
# print(a)  # [23, 28, 12, 23, 34]
# a.reverse()
# print(a)  # [34, 23, 12, 28, 23]

################################# METHOD SORT  ################################

# Cамый, наверное, популярный метод списков - это .sort. Он выполняет сортировку. Имеет следующий формат:
#
# L.sort(key=None, reverse=False)
# Если не передать никаких аргументов, то по умолчанию сортировка будет выполнена по возрастанию.
# После этого можете вызвать метод .reverse. Список отсортируется по убыванию. Если вы сразу хотите его отсортировать
# по убыванию, то вы можете вызвать метод .sort и в нём внутри скобок дополнительно прописать reverse=True.
#
# a = [34, 23, 12, 28, 23]
# a.sort()
# print(a)  # [12, 23, 23, 28, 34]
# a.reverse()
# print(a)  # [34, 28, 23, 23, 12]
#
# b = [34, 23, 12, 28, 23]
# b.sort(reverse=True)
# print(b)  # [34, 28, 23, 23, 12]


###################################### !!!!!PRACTICE!!!!! #################################3

######################################## EX1 ###############################################

# В вашем распоряжении список numbers. Ваша задача добавить по порядку четыре следующих элемента в конец списка: 111, 222, 789 и 201
#
#  В качестве ответа необходимо вывести измененный список numbers
#
# numbers = [-214, 181, -139, 448, -20, -917, 32, 422, -895, 198, 284, 472, -986, -964, -989, 29]
# numbers.append(111)
# numbers.append(222)
# numbers.append(789)
# numbers.append(201)
# print(numbers)

######################################## EX2 ###############################################

# В вашем распоряжении список numbers. Ваша задача выполнить четыре следующих действия в том же порядке, как они указаны в списке:
#
# добавить значение 111  на 5-й индекс;
# добавить значение 222  на 8-й индекс;
# добавить значение 789  на 0-й индекс;
# добавить значение 201  на 11-й индекс;
#  В качестве ответа необходимо вывести измененный список numbers
#
# numbers = [-214, 181, -139, 448, -20, -917, 32, 422, -895, 198, 284, 472, -986, -964, -989, 29]
# numbers.insert(5, 111)
# numbers.insert(8, 222)
# numbers.insert(0, 789)
# numbers.insert(11, 201)
# print(numbers)


######################################## EX3 ###############################################

# В вашем распоряжении два списка numbers  и extra. Ваша задача расширить numbers список за счет списка extra
#
# Все элементы списка extra должны добавиться по порядку в конец списка numbers
#
#  В качестве ответа необходимо вывести измененный список numbers
#
# [-214, 181, -139, 448, -20, -917, 32, 422, -895, 198, 284, 472, -986, -964, -989, 29, 43, 54, 23, 87, -4, -832, 90, 32, 543, 432, 4, 76, 8, 0, 21, 90, 32]


# numbers = [-214, 181, -139, 448, -20, -917, 32, 422, -895, 198, 284, 472, -986, -964, -989, 29]
# extra = [43, 54, 23, 87, -4, -832, 90, 32, 543, 432, 4, 76, 8, 0, 21, 90, 32]
# numbers.extend(extra)
# print(numbers)


######################################## EX4 ###############################################

# В вашем распоряжении список numbers. Ваша задача выполнить действия из списка строго в том же порядке, а именно:
#
# удалить элемент, стоящий на последней позиции;
# удалить элемент, стоящий на 0-й позиции;
# удалить элемент, стоящий на 12-й позиции;
# удалить элемент, стоящий на 7-й позиции;
#  В качестве ответа необходимо вывести на первой строке измененный список numbers, а на второй - сумму значений удаленных элементов

# numbers = [-214, 181, -139, 448, -20, -917, 32, 422, -895, 198, 284, 472, -986, -964, -989, 29]
#
# deleted_sum = 0
# deleted_sum += numbers.pop()
# deleted_sum += numbers.pop(0)
# deleted_sum += numbers.pop(12)
# deleted_sum += numbers.pop(7)
#
# print(numbers)
# print(deleted_sum)

######################################## EX5 ###############################################

# В вашем распоряжении список numbers. ​Ваша задача удалить из этого списка числа 3, 5, 7 и 9.
#
#  В качестве ответа необходимо вывести измененный список numbers

# numbers = [-214, 777, 181, 9, 32, -139, 43, 89, 77, 448, -20, -917, 54, 5, 432, 43, 32, 422, -895, 7, 198, 284, 472, 3, -986, -964, -989, 29]
# numbers.remove(3)
# numbers.remove(5)
# numbers.remove(7)
# numbers.remove(9)
# print(numbers)

######################################## EX6 ###############################################

# В вашем распоряжении список numbers. Ваша задача отсортировать список numbers в порядке убывания  и вывести на экран результат.
#
# [472, 448, 422, 284, 198, 181, 32, 29, -20, -139, -214, -895, -917, -964, -986, -989]

numbers = [-214, 181, -139, 448, -20, -917, 32, 422, -895, 198, 284, 472, -986, -964, -989, 29]
numbers.sort(reverse=True)
print(numbers)


######################################## EX1 ###############################################


######################################## EX1 ###############################################


######################################## EX1 ###############################################


######################################## EX1 ###############################################


######################################## EX1 ###############################################


######################################## EX1 ###############################################


######################################## EX1 ###############################################